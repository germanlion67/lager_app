// Mocks generated by Mockito 5.4.6 from annotations
// in elektronik_verwaltung/test/services/artikel_export_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i6;

import 'package:elektronik_verwaltung/services/app_log_service.dart' as _i3;
import 'package:elektronik_verwaltung/services/nextcloud_webdav_client.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeNextcloudConfig_0 extends _i1.SmartFake
    implements _i2.NextcloudConfig {
  _FakeNextcloudConfig_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppLogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogService extends _i1.Mock implements _i3.AppLogService {
  MockAppLogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> log(String? message) => (super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logError(
    String? error, [
    StackTrace? stack,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #logError,
          [
            error,
            stack,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String> readLog() => (super.noSuchMethod(
        Invocation.method(
          #readLog,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #readLog,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> clearLog() => (super.noSuchMethod(
        Invocation.method(
          #clearLog,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NextcloudWebDavClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockNextcloudWebDavClient extends _i1.Mock
    implements _i2.NextcloudWebDavClient {
  MockNextcloudWebDavClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NextcloudConfig get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeNextcloudConfig_0(
          this,
          Invocation.getter(#config),
        ),
      ) as _i2.NextcloudConfig);

  @override
  _i4.Future<void> ensureFolder(String? folderPath) => (super.noSuchMethod(
        Invocation.method(
          #ensureFolder,
          [folderPath],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> uploadFile(
    String? localPath,
    String? remoteFolder, [
    String? customFilename,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            localPath,
            remoteFolder,
            customFilename,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> downloadFile(
    String? remotePath,
    String? localPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [
            remotePath,
            localPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<String>> listFiles(String? remoteFolderPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #listFiles,
          [remoteFolderPath],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> uploadBytes({
    required _i6.Uint8List? bytes,
    required String? remoteRelativePath,
    String? contentType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadBytes,
          [],
          {
            #bytes: bytes,
            #remoteRelativePath: remoteRelativePath,
            #contentType: contentType,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.Uint8List> downloadBytes(
          {required String? remoteRelativePath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadBytes,
          [],
          {#remoteRelativePath: remoteRelativePath},
        ),
        returnValue: _i4.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i4.Future<_i6.Uint8List>);

  @override
  _i4.Future<void> uploadFileNew({
    required String? localPath,
    required String? remoteRelativePath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFileNew,
          [],
          {
            #localPath: localPath,
            #remoteRelativePath: remoteRelativePath,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> downloadFileNew({
    required String? remoteRelativePath,
    required String? localPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFileNew,
          [],
          {
            #remoteRelativePath: remoteRelativePath,
            #localPath: localPath,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<String>> listFolders(String? remoteFolderPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #listFolders,
          [remoteFolderPath],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
}
